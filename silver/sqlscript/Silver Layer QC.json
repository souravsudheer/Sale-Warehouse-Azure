{
	"name": "Silver Layer QC",
	"properties": {
		"content": {
			"query": "/*\n===============================================================================\nSilver Layer - Data Quality Checks\n===============================================================================\nScript Purpose:\n    This script performs various quality checks for data consistency, accuracy, \n    and standardization across the 'silver' layer. It includes checks for:\n    - Null or duplicate primary keys\n    - Unwanted spaces in string fields\n    - Data standardization and consistency\n    - Invalid date ranges and orders\n    - Data consistency between related fields\n\nUsage Notes:\n    - Run these checks after loading Silver Layer\n    - Investigate and resolve any discrepancies found during the checks\n    - Expected result for most checks: \"No Results\" indicates good data quality\n===============================================================================\n*/\n\nPRINT '===============================================================================';\nPRINT 'SILVER LAYER DATA QUALITY CHECKS';\nPRINT '===============================================================================';\n\nPRINT '====================================================================';\nPRINT 'Checking silver.crm_cust_info';\nPRINT '====================================================================';\n\n-- Check 1: NULLs or Duplicates in Primary Key\n-- Expectation: No Results\nPRINT '>> Check 1: Primary Key Duplicates/NULLs';\nSELECT \n    'crm_cust_info' AS table_name,\n    'Primary Key Issues' AS check_type,\n    cst_id,\n    COUNT(*) as duplicate_count\nFROM silver.crm_cust_info\nGROUP BY cst_id\nHAVING COUNT(*) > 1 OR cst_id IS NULL;\n\n-- Check 2: Unwanted Spaces in Key Fields\n-- Expectation: No Results\nPRINT '>> Check 2: Unwanted Spaces';\nSELECT \n    'crm_cust_info' AS table_name,\n    'Unwanted Spaces' AS check_type,\n    cst_key,\n    'cst_key has leading/trailing spaces' AS issue\nFROM silver.crm_cust_info\nWHERE cst_key != TRIM(cst_key)\n\nUNION ALL\n\nSELECT \n    'crm_cust_info',\n    'Unwanted Spaces',\n    cst_firstname,\n    'cst_firstname has leading/trailing spaces'\nFROM silver.crm_cust_info\nWHERE cst_firstname != TRIM(cst_firstname)\n\nUNION ALL\n\nSELECT \n    'crm_cust_info',\n    'Unwanted Spaces', \n    cst_lastname,\n    'cst_lastname has leading/trailing spaces'\nFROM silver.crm_cust_info\nWHERE cst_lastname != TRIM(cst_lastname);\n\n-- Check 3: Data Standardization Verification\nPRINT '>> Check 3: Data Standardization (should only show expected values)';\nSELECT \n    'crm_cust_info' AS table_name,\n    'Marital Status Values' AS check_type,\n    cst_marital_status AS value,\n    COUNT(*) AS count\nFROM silver.crm_cust_info\nGROUP BY cst_marital_status\nORDER BY COUNT(*) DESC;\n\nSELECT \n    'crm_cust_info' AS table_name,\n    'Gender Values' AS check_type,\n    cst_gndr AS value,\n    COUNT(*) AS count\nFROM silver.crm_cust_info\nGROUP BY cst_gndr\nORDER BY COUNT(*) DESC;\n\nPRINT '====================================================================';\nPRINT 'Checking silver.crm_prd_info';\nPRINT '====================================================================';\n\n-- Check 4: Product Info Primary Key Issues\nPRINT '>> Check 4: Product Primary Key Duplicates/NULLs';\nSELECT \n    'crm_prd_info' AS table_name,\n    'Primary Key Issues' AS check_type,\n    prd_id,\n    COUNT(*) as duplicate_count\nFROM silver.crm_prd_info\nGROUP BY prd_id\nHAVING COUNT(*) > 1 OR prd_id IS NULL;\n\n-- Check 5: Negative or NULL Product Costs\nPRINT '>> Check 5: Invalid Product Costs';\nSELECT \n    'crm_prd_info' AS table_name,\n    'Invalid Cost' AS check_type,\n    prd_id,\n    prd_nm,\n    prd_cost,\n    CASE \n        WHEN prd_cost IS NULL THEN 'NULL cost'\n        WHEN prd_cost < 0 THEN 'Negative cost'\n        ELSE 'Unknown issue'\n    END AS issue\nFROM silver.crm_prd_info\nWHERE prd_cost < 0 OR prd_cost IS NULL;\n\n-- Check 6: Product Line Standardization\nPRINT '>> Check 6: Product Line Values (should only show expected values)';\nSELECT \n    'crm_prd_info' AS table_name,\n    'Product Line Values' AS check_type,\n    prd_line AS value,\n    COUNT(*) AS count\nFROM silver.crm_prd_info\nGROUP BY prd_line\nORDER BY COUNT(*) DESC;\n\n-- Check 7: Invalid Date Orders (Start Date > End Date)\nPRINT '>> Check 7: Invalid Product Date Ranges';\nSELECT \n    'crm_prd_info' AS table_name,\n    'Invalid Date Range' AS check_type,\n    prd_id,\n    prd_nm,\n    prd_start_dt,\n    prd_end_dt,\n    'End date before start date' AS issue\nFROM silver.crm_prd_info\nWHERE prd_end_dt IS NOT NULL \n    AND prd_start_dt IS NOT NULL \n    AND prd_end_dt < prd_start_dt;\n\nPRINT '====================================================================';\nPRINT 'Checking silver.crm_sales_details';\nPRINT '====================================================================';\n\n-- Check 8: Invalid Date Orders in Sales\nPRINT '>> Check 8: Invalid Sales Date Sequences';\nSELECT \n    'crm_sales_details' AS table_name,\n    'Invalid Date Order' AS check_type,\n    sls_ord_num,\n    sls_order_dt,\n    sls_ship_dt,\n    sls_due_dt,\n    CASE \n        WHEN sls_order_dt > sls_ship_dt THEN 'Order date after ship date'\n        WHEN sls_order_dt > sls_due_dt THEN 'Order date after due date'\n        WHEN sls_ship_dt > sls_due_dt THEN 'Ship date after due date'\n        ELSE 'Other date issue'\n    END AS issue\nFROM silver.crm_sales_details\nWHERE (sls_order_dt > sls_ship_dt AND sls_ship_dt IS NOT NULL)\n   OR (sls_order_dt > sls_due_dt AND sls_due_dt IS NOT NULL)\n   OR (sls_ship_dt > sls_due_dt AND sls_ship_dt IS NOT NULL AND sls_due_dt IS NOT NULL);\n\n-- Check 9: Sales Calculation Consistency\nPRINT '>> Check 9: Sales Calculation Issues';\nSELECT TOP 20\n    'crm_sales_details' AS table_name,\n    'Sales Calculation Issue' AS check_type,\n    sls_ord_num,\n    sls_sales,\n    sls_quantity,\n    sls_price,\n    (sls_quantity * sls_price) AS calculated_sales,\n    CASE \n        WHEN sls_sales IS NULL THEN 'NULL sales amount'\n        WHEN sls_quantity IS NULL THEN 'NULL quantity'\n        WHEN sls_price IS NULL THEN 'NULL price'\n        WHEN sls_sales <= 0 THEN 'Zero or negative sales'\n        WHEN sls_quantity <= 0 THEN 'Zero or negative quantity'\n        WHEN sls_price <= 0 THEN 'Zero or negative price'\n        WHEN sls_sales != sls_quantity * sls_price THEN 'Sales != Quantity * Price'\n        ELSE 'Other calculation issue'\n    END AS issue\nFROM silver.crm_sales_details\nWHERE sls_sales != sls_quantity * sls_price\n   OR sls_sales IS NULL \n   OR sls_quantity IS NULL \n   OR sls_price IS NULL\n   OR sls_sales <= 0 \n   OR sls_quantity <= 0 \n   OR sls_price <= 0\nORDER BY sls_sales, sls_quantity, sls_price;\n\nPRINT '====================================================================';\nPRINT 'Checking silver.erp_cust_az12';\nPRINT '====================================================================';\n\n-- Check 10: Invalid Birthdates\nPRINT '>> Check 10: Invalid Birth Dates';\nSELECT \n    'erp_cust_az12' AS table_name,\n    'Invalid Birth Date' AS check_type,\n    cid,\n    bdate,\n    CASE \n        WHEN bdate < '1924-01-01' THEN 'Birth date too old (before 1924)'\n        WHEN bdate > GETDATE() THEN 'Future birth date'\n        ELSE 'Other date issue'\n    END AS issue\nFROM silver.erp_cust_az12\nWHERE bdate < '1924-01-01' \n   OR bdate > GETDATE();\n\n-- Check 11: Gender Standardization\nPRINT '>> Check 11: Gender Values (should only show expected values)';\nSELECT \n    'erp_cust_az12' AS table_name,\n    'Gender Values' AS check_type,\n    gen AS value,\n    COUNT(*) AS count\nFROM silver.erp_cust_az12\nGROUP BY gen\nORDER BY COUNT(*) DESC;\n\nPRINT '====================================================================';\nPRINT 'Checking silver.erp_loc_a101';\nPRINT '====================================================================';\n\n-- Check 12: Country Standardization\nPRINT '>> Check 12: Country Values';\nSELECT \n    'erp_loc_a101' AS table_name,\n    'Country Values' AS check_type,\n    cntry AS value,\n    COUNT(*) AS count\nFROM silver.erp_loc_a101\nGROUP BY cntry\nORDER BY COUNT(*) DESC;\n\nPRINT '====================================================================';\nPRINT 'Checking silver.erp_px_cat_g1v2';\nPRINT '====================================================================';\n\n-- Check 13: Unwanted Spaces in Category Data\nPRINT '>> Check 13: Unwanted Spaces in Category Data';\nSELECT \n    'erp_px_cat_g1v2' AS table_name,\n    'Unwanted Spaces' AS check_type,\n    id,\n    CASE \n        WHEN cat != TRIM(cat) THEN 'cat field has spaces'\n        WHEN subcat != TRIM(subcat) THEN 'subcat field has spaces'\n        WHEN maintenance != TRIM(maintenance) THEN 'maintenance field has spaces'\n        ELSE 'Unknown spacing issue'\n    END AS issue\nFROM silver.erp_px_cat_g1v2\nWHERE cat != TRIM(cat) \n   OR subcat != TRIM(subcat) \n   OR maintenance != TRIM(maintenance);\n\n-- Check 14: Maintenance Values\nPRINT '>> Check 14: Maintenance Values';\nSELECT \n    'erp_px_cat_g1v2' AS table_name,\n    'Maintenance Values' AS check_type,\n    maintenance AS value,\n    COUNT(*) AS count\nFROM silver.erp_px_cat_g1v2\nGROUP BY maintenance\nORDER BY COUNT(*) DESC;\n\nPRINT '====================================================================';\nPRINT 'CROSS-TABLE VALIDATION CHECKS';\nPRINT '====================================================================';\n\n-- Check 15: Customer ID Consistency Between CRM and ERP\nPRINT '>> Check 15: Customer ID Consistency (CRM vs ERP)';\nSELECT \n    'Cross-Table' AS table_name,\n    'Customer ID Mismatch' AS check_type,\n    'Customers in CRM but not in ERP' AS issue,\n    COUNT(*) AS count\nFROM silver.crm_cust_info c\nLEFT JOIN silver.erp_cust_az12 e ON CAST(c.cst_id AS VARCHAR) = e.cid\nWHERE e.cid IS NULL\n\nUNION ALL\n\nSELECT \n    'Cross-Table',\n    'Customer ID Mismatch',\n    'Customers in ERP but not in CRM',\n    COUNT(*)\nFROM silver.erp_cust_az12 e\nLEFT JOIN silver.crm_cust_info c ON e.cid = CAST(c.cst_id AS VARCHAR)\nWHERE c.cst_id IS NULL;\n\n-- Check 16: Product Key Consistency\nPRINT '>> Check 16: Product Key Consistency (Sales vs Product Master)';\nSELECT \n    'Cross-Table' AS table_name,\n    'Product Key Mismatch' AS check_type,\n    'Product keys in Sales but not in Product Master' AS issue,\n    COUNT(DISTINCT s.sls_prd_key) AS count\nFROM silver.crm_sales_details s\nLEFT JOIN silver.crm_prd_info p ON s.sls_prd_key = p.prd_key\nWHERE p.prd_key IS NULL;\n\nPRINT '===============================================================================';\nPRINT 'DATA QUALITY CHECKS COMPLETED';\nPRINT 'Review all results above:';\nPRINT '- Empty result sets indicate good data quality for that check';\nPRINT '- Non-empty results require investigation and potential data fixes';\nPRINT '===============================================================================';",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "bronze_verify",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}