{
	"name": "Gold layer",
	"properties": {
		"content": {
			"query": "/*\n===============================================================================\nGold Layer Views - Star Schema for Analytics\n===============================================================================\nScript Purpose:\n    This script creates views for the Gold layer in the data warehouse using\n    Synapse Serverless. The Gold layer represents the final dimension and fact \n    tables (Star Schema) for business analytics and reporting.\n    \n    Each view performs transformations and combines data from the Silver layer \n    to produce a clean, enriched, and business-ready dataset.\n\nUsage:\n    - These views can be queried directly for analytics and reporting\n    - Optimized for Synapse Serverless SQL pools\n    - Designed for Power BI, Tableau, and other BI tools\n===============================================================================\n*/\n\n-- Create Gold Schema\nIF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'gold')\n    EXEC('CREATE SCHEMA gold');\nGO\n\n/*\n===============================================================================\nCreate Dimension: gold.dim_customers\n===============================================================================\nCombines CRM customer data with ERP demographics and location data\n*/\nCREATE OR ALTER VIEW gold.dim_customers AS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY ci.cst_id) AS customer_key, -- Surrogate key\n    ci.cst_id                              AS customer_id,\n    ci.cst_key                             AS customer_number,\n    ci.cst_firstname                       AS first_name,\n    ci.cst_lastname                        AS last_name,\n    ISNULL(la.cntry, 'Unknown')            AS country,\n    ci.cst_marital_status                  AS marital_status,\n    CASE \n        WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr -- CRM is primary source\n        ELSE ISNULL(ca.gen, 'n/a')                 -- Fallback to ERP data\n    END                                    AS gender,\n    ca.bdate                               AS birthdate,\n    -- Calculate age if birthdate exists\n    CASE \n        WHEN ca.bdate IS NOT NULL \n        THEN DATEDIFF(YEAR, ca.bdate, GETDATE()) \n        ELSE NULL \n    END                                    AS age,\n    -- Age group for analytics\n    CASE \n        WHEN DATEDIFF(YEAR, ca.bdate, GETDATE()) < 25 THEN 'Under 25'\n        WHEN DATEDIFF(YEAR, ca.bdate, GETDATE()) BETWEEN 25 AND 34 THEN '25-34'\n        WHEN DATEDIFF(YEAR, ca.bdate, GETDATE()) BETWEEN 35 AND 44 THEN '35-44'\n        WHEN DATEDIFF(YEAR, ca.bdate, GETDATE()) BETWEEN 45 AND 54 THEN '45-54'\n        WHEN DATEDIFF(YEAR, ca.bdate, GETDATE()) BETWEEN 55 AND 64 THEN '55-64'\n        WHEN DATEDIFF(YEAR, ca.bdate, GETDATE()) >= 65 THEN '65+'\n        ELSE 'Unknown'\n    END                                    AS age_group,\n    ci.cst_create_date                     AS create_date,\n    -- Customer tenure in years\n    DATEDIFF(YEAR, ci.cst_create_date, GETDATE()) AS customer_tenure_years,\n    ci.dwh_create_date                     AS dwh_create_date\nFROM silver.crm_cust_info ci\nLEFT JOIN silver.erp_cust_az12 ca\n    ON CAST(ci.cst_id AS VARCHAR) = ca.cid\nLEFT JOIN silver.erp_loc_a101 la\n    ON CAST(ci.cst_id AS VARCHAR) = la.cid;\nGO\n\n/*\n===============================================================================\nCreate Dimension: gold.dim_products\n===============================================================================\nCombines product master data with category information\n*/\nCREATE OR ALTER VIEW gold.dim_products AS\nSELECT\n    ROW_NUMBER() OVER (ORDER BY pn.prd_start_dt, pn.prd_key) AS product_key, -- Surrogate key\n    pn.prd_id                              AS product_id,\n    pn.prd_key                             AS product_number,\n    pn.prd_nm                              AS product_name,\n    pn.cat_id                              AS category_id,\n    ISNULL(pc.cat, 'Uncategorized')        AS category,\n    ISNULL(pc.subcat, 'No Subcategory')    AS subcategory,\n    ISNULL(pc.maintenance, 'Unknown')      AS maintenance,\n    pn.prd_cost                            AS cost,\n    pn.prd_line                            AS product_line,\n    pn.prd_start_dt                        AS start_date,\n    pn.prd_end_dt                          AS end_date,\n    -- Product status\n    CASE \n        WHEN pn.prd_end_dt IS NULL THEN 'Active'\n        WHEN pn.prd_end_dt > GETDATE() THEN 'Active'\n        ELSE 'Discontinued'\n    END                                    AS product_status,\n    -- Cost tier for analytics\n    CASE \n        WHEN pn.prd_cost = 0 THEN 'Free'\n        WHEN pn.prd_cost BETWEEN 1 AND 100 THEN 'Low Cost (1-100)'\n        WHEN pn.prd_cost BETWEEN 101 AND 500 THEN 'Medium Cost (101-500)'\n        WHEN pn.prd_cost BETWEEN 501 AND 1000 THEN 'High Cost (501-1000)'\n        WHEN pn.prd_cost > 1000 THEN 'Premium (1000+)'\n        ELSE 'Unknown'\n    END                                    AS cost_tier,\n    pn.dwh_create_date                     AS dwh_create_date\nFROM silver.crm_prd_info pn\nLEFT JOIN silver.erp_px_cat_g1v2 pc\n    ON pn.cat_id = pc.id;\nGO\n\n/*\n===============================================================================\nCreate Fact Table: gold.fact_sales\n===============================================================================\nCentral fact table for sales transactions with foreign keys to dimensions\n*/\nCREATE OR ALTER VIEW gold.fact_sales AS\nSELECT\n    -- Business Keys\n    sd.sls_ord_num                         AS order_number,\n    \n    -- Foreign Keys to Dimensions\n    pr.product_key                         AS product_key,\n    cu.customer_key                        AS customer_key,\n    \n    -- Date Dimensions (for time-based analysis)\n    sd.sls_order_dt                        AS order_date,\n    YEAR(sd.sls_order_dt)                  AS order_year,\n    MONTH(sd.sls_order_dt)                 AS order_month,\n    DATEPART(QUARTER, sd.sls_order_dt)     AS order_quarter,\n    DATENAME(MONTH, sd.sls_order_dt)       AS order_month_name,\n    DATENAME(WEEKDAY, sd.sls_order_dt)     AS order_day_of_week,\n    \n    sd.sls_ship_dt                         AS shipping_date,\n    sd.sls_due_dt                          AS due_date,\n    \n    -- Date Calculations\n    CASE \n        WHEN sd.sls_ship_dt IS NOT NULL AND sd.sls_order_dt IS NOT NULL\n        THEN DATEDIFF(DAY, sd.sls_order_dt, sd.sls_ship_dt)\n        ELSE NULL\n    END                                    AS days_to_ship,\n    \n    CASE \n        WHEN sd.sls_due_dt IS NOT NULL AND sd.sls_order_dt IS NOT NULL\n        THEN DATEDIFF(DAY, sd.sls_order_dt, sd.sls_due_dt)\n        ELSE NULL\n    END                                    AS days_to_due,\n    \n    -- Measures/Facts\n    sd.sls_sales                           AS sales_amount,\n    sd.sls_quantity                        AS quantity,\n    sd.sls_price                           AS unit_price,\n    \n    -- Calculated Measures\n    sd.sls_sales * 1.0 / NULLIF(sd.sls_quantity, 0) AS avg_unit_price,\n    \n    -- Sales Performance Categories\n    CASE \n        WHEN sd.sls_sales = 0 THEN 'No Sale'\n        WHEN sd.sls_sales BETWEEN 1 AND 100 THEN 'Small (1-100)'\n        WHEN sd.sls_sales BETWEEN 101 AND 500 THEN 'Medium (101-500)'\n        WHEN sd.sls_sales BETWEEN 501 AND 1000 THEN 'Large (501-1000)'\n        WHEN sd.sls_sales > 1000 THEN 'Very Large (1000+)'\n        ELSE 'Unknown'\n    END                                    AS sales_tier,\n    \n    -- Quantity Categories  \n    CASE \n        WHEN sd.sls_quantity = 1 THEN 'Single Item'\n        WHEN sd.sls_quantity BETWEEN 2 AND 5 THEN 'Small Quantity (2-5)'\n        WHEN sd.sls_quantity BETWEEN 6 AND 10 THEN 'Medium Quantity (6-10)'\n        WHEN sd.sls_quantity > 10 THEN 'Bulk Order (10+)'\n        ELSE 'Unknown'\n    END                                    AS quantity_tier,\n    \n    sd.dwh_create_date                     AS dwh_create_date\n\nFROM silver.crm_sales_details sd\nLEFT JOIN gold.dim_products pr\n    ON sd.sls_prd_key = pr.product_number\nLEFT JOIN gold.dim_customers cu\n    ON sd.sls_cust_id = cu.customer_id\nWHERE sd.sls_order_dt IS NOT NULL;  -- Ensure we have valid order dates\nGO\n\n/*\n===============================================================================\nCreate Summary Views for Common Business Analytics\n===============================================================================\n*/\n\n-- Monthly Sales Summary\nCREATE OR ALTER VIEW gold.monthly_sales_summary AS\nSELECT\n    order_year,\n    order_month,\n    order_month_name,\n    COUNT(DISTINCT order_number)           AS total_orders,\n    COUNT(DISTINCT customer_key)           AS unique_customers,\n    COUNT(DISTINCT product_key)            AS unique_products,\n    SUM(sales_amount)                      AS total_sales,\n    SUM(quantity)                          AS total_quantity,\n    AVG(sales_amount * 1.0)                AS avg_order_value,\n    AVG(unit_price * 1.0)                  AS avg_unit_price,\n    MIN(order_date)                        AS first_order_date,\n    MAX(order_date)                        AS last_order_date\nFROM gold.fact_sales\nGROUP BY order_year, order_month, order_month_name;\nGO\n\n-- Customer Sales Summary\nCREATE OR ALTER VIEW gold.customer_sales_summary AS\nSELECT\n    c.customer_key,\n    c.customer_id,\n    c.first_name,\n    c.last_name,\n    c.country,\n    c.age_group,\n    c.gender,\n    c.marital_status,\n    COUNT(DISTINCT f.order_number)         AS total_orders,\n    COUNT(DISTINCT f.product_key)          AS unique_products_purchased,\n    SUM(f.sales_amount)                    AS total_sales,\n    AVG(f.sales_amount * 1.0)              AS avg_order_value,\n    MIN(f.order_date)                      AS first_purchase_date,\n    MAX(f.order_date)                      AS last_purchase_date,\n    DATEDIFF(DAY, MIN(f.order_date), MAX(f.order_date)) AS customer_lifetime_days\nFROM gold.dim_customers c\nINNER JOIN gold.fact_sales f ON c.customer_key = f.customer_key\nGROUP BY \n    c.customer_key, c.customer_id, c.first_name, c.last_name,\n    c.country, c.age_group, c.gender, c.marital_status;\nGO\n\n-- Product Performance Summary\nCREATE OR ALTER VIEW gold.product_performance_summary AS\nSELECT\n    p.product_key,\n    p.product_id,\n    p.product_name,\n    p.category,\n    p.subcategory,\n    p.product_line,\n    p.cost_tier,\n    p.product_status,\n    COUNT(DISTINCT f.order_number)         AS total_orders,\n    COUNT(DISTINCT f.customer_key)         AS unique_customers,\n    SUM(f.sales_amount)                    AS total_sales,\n    SUM(f.quantity)                        AS total_quantity_sold,\n    AVG(f.unit_price * 1.0)                AS avg_selling_price,\n    MIN(f.order_date)                      AS first_sale_date,\n    MAX(f.order_date)                      AS last_sale_date\nFROM gold.dim_products p\nINNER JOIN gold.fact_sales f ON p.product_key = f.product_key\nGROUP BY \n    p.product_key, p.product_id, p.product_name, p.category, \n    p.subcategory, p.product_line, p.cost_tier, p.product_status;\nGO\n\n/*\n===============================================================================\nTest Queries - Verify Gold Layer\n===============================================================================\n*/\n\n-- Test row counts\nSELECT 'dim_customers' AS view_name, COUNT(*) AS row_count FROM gold.dim_customers\nUNION ALL\nSELECT 'dim_products', COUNT(*) FROM gold.dim_products  \nUNION ALL\nSELECT 'fact_sales', COUNT(*) FROM gold.fact_sales\nUNION ALL\nSELECT 'monthly_sales_summary', COUNT(*) FROM gold.monthly_sales_summary\nUNION ALL\nSELECT 'customer_sales_summary', COUNT(*) FROM gold.customer_sales_summary\nUNION ALL\nSELECT 'product_performance_summary', COUNT(*) FROM gold.product_performance_summary;",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "bronze_verify",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}